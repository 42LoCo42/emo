// Code generated by ogen, DO NOT EDIT.

package api

import (
	"math/bits"
	"strconv"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// EncodeURI encodes Song as URI form.
func (s *Song) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("ID", func(e uri.Encoder) error {
		if unwrapped := string(s.ID); true {
			return e.EncodeValue(conv.StringToString(unwrapped))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"ID\"")
	}
	if err := e.EncodeField("Name", func(e uri.Encoder) error {
		if unwrapped := string(s.Name); true {
			return e.EncodeValue(conv.StringToString(unwrapped))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"Name\"")
	}
	return nil
}

var uriFieldsNameOfSong = [2]string{
	0: "ID",
	1: "Name",
}

// DecodeURI decodes Song from URI form.
func (s *Song) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Song to nil")
	}
	var requiredBitSet [1]uint8

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "ID":
			requiredBitSet[0] |= 1 << 0
			if err := func() error {
				var sDotIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.ID = SongID(sDotIDVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ID\"")
			}
		case "Name":
			requiredBitSet[0] |= 1 << 1
			if err := func() error {
				var sDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Name = SongName(sDotNameVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"Name\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Song")
	}
	// Validate required fields.
	var failures []validate.FieldError
	for i, mask := range [1]uint8{
		0b00000011,
	} {
		if result := (requiredBitSet[i] & mask) ^ mask; result != 0 {
			// Mask only required fields and check equality to mask using XOR.
			//
			// If XOR result is not zero, result is not equal to expected, so some fields are missed.
			// Bits of fields which would be set are actually bits of missed fields.
			missed := bits.OnesCount8(result)
			for bitN := 0; bitN < missed; bitN++ {
				bitIdx := bits.TrailingZeros8(result)
				fieldIdx := i*8 + bitIdx
				var name string
				if fieldIdx < len(uriFieldsNameOfSong) {
					name = uriFieldsNameOfSong[fieldIdx]
				} else {
					name = strconv.Itoa(fieldIdx)
				}
				failures = append(failures, validate.FieldError{
					Name:  name,
					Error: validate.ErrFieldRequired,
				})
				// Reset bit.
				result &^= 1 << bitIdx
			}
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}

	return nil
}

// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// LoginUserGet implements GET /login/{user} operation.
	//
	// This endpoint returns a valid JWT encrypted with the user's public key.
	//
	// GET /login/{user}
	LoginUserGet(ctx context.Context, params LoginUserGetParams) (LoginUserGetOK, error)
	// SongsGet implements GET /songs operation.
	//
	// Get all songs.
	//
	// GET /songs
	SongsGet(ctx context.Context) ([]Song, error)
	// SongsNameDelete implements DELETE /songs/{name} operation.
	//
	// Delete a song.
	//
	// DELETE /songs/{name}
	SongsNameDelete(ctx context.Context, params SongsNameDeleteParams) error
	// SongsNameFileGet implements GET /songs/{name}/file operation.
	//
	// Get the contents of the song file.
	//
	// GET /songs/{name}/file
	SongsNameFileGet(ctx context.Context, params SongsNameFileGetParams) (SongsNameFileGetOK, error)
	// SongsNameGet implements GET /songs/{name} operation.
	//
	// Get a song by name.
	//
	// GET /songs/{name}
	SongsNameGet(ctx context.Context, params SongsNameGetParams) (*Song, error)
	// SongsPost implements POST /songs operation.
	//
	// Create or update a song.
	//
	// POST /songs
	SongsPost(ctx context.Context, req OptSongsPostReq) error
	// StatsBulkaddPost implements POST /stats/bulkadd operation.
	//
	// Add a list of stats to the current ones.
	//
	// POST /stats/bulkadd
	StatsBulkaddPost(ctx context.Context, req []Stat) error
	// StatsGet implements GET /stats operation.
	//
	// Get all stats.
	//
	// GET /stats
	StatsGet(ctx context.Context) ([]Stat, error)
	// StatsIDDelete implements DELETE /stats/{id} operation.
	//
	// Delete a stat.
	//
	// DELETE /stats/{id}
	StatsIDDelete(ctx context.Context, params StatsIDDeleteParams) error
	// StatsIDGet implements GET /stats/{id} operation.
	//
	// Get a stat.
	//
	// GET /stats/{id}
	StatsIDGet(ctx context.Context, params StatsIDGetParams) (*Stat, error)
	// StatsPost implements POST /stats operation.
	//
	// Create or update stat.
	//
	// POST /stats
	StatsPost(ctx context.Context, req OptStat) (*Stat, error)
	// StatsSongSongGet implements GET /stats/song/{song} operation.
	//
	// Filter stats by song.
	//
	// GET /stats/song/{song}
	StatsSongSongGet(ctx context.Context, params StatsSongSongGetParams) ([]Stat, error)
	// StatsUserGet implements GET /stats/user operation.
	//
	// Get stats of current user.
	//
	// GET /stats/user
	StatsUserGet(ctx context.Context) ([]Stat, error)
	// StatsUserUserGet implements GET /stats/user/{user} operation.
	//
	// Filter stats by user.
	//
	// GET /stats/user/{user}
	StatsUserUserGet(ctx context.Context, params StatsUserUserGetParams) ([]Stat, error)
	// UsersGet implements GET /users operation.
	//
	// Get all users.
	//
	// GET /users
	UsersGet(ctx context.Context) ([]User, error)
	// UsersNameDelete implements DELETE /users/{name} operation.
	//
	// Delete a user.
	//
	// DELETE /users/{name}
	UsersNameDelete(ctx context.Context, params UsersNameDeleteParams) error
	// UsersNameGet implements GET /users/{name} operation.
	//
	// Get a user by name.
	//
	// GET /users/{name}
	UsersNameGet(ctx context.Context, params UsersNameGetParams) (*User, error)
	// UsersPost implements POST /users operation.
	//
	// Create or update user.
	//
	// POST /users
	UsersPost(ctx context.Context, req OptUser) error
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}

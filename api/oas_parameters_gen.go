// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// LoginUserGetParams is parameters of GET /login/{user} operation.
type LoginUserGetParams struct {
	// The name of the user.
	User UserName
}

func unpackLoginUserGetParams(packed middleware.Parameters) (params LoginUserGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "user",
			In:   "path",
		}
		params.User = packed[key].(UserName)
	}
	return params
}

func decodeLoginUserGetParams(args [1]string, argsEscaped bool, r *http.Request) (params LoginUserGetParams, _ error) {
	// Decode path: user.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "user",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotUserVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUserVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.User = UserName(paramsDotUserVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SongsNameDeleteParams is parameters of DELETE /songs/{name} operation.
type SongsNameDeleteParams struct {
	// The name of the song.
	Name SongName
}

func unpackSongsNameDeleteParams(packed middleware.Parameters) (params SongsNameDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(SongName)
	}
	return params
}

func decodeSongsNameDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params SongsNameDeleteParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = SongName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SongsNameFileGetParams is parameters of GET /songs/{name}/file operation.
type SongsNameFileGetParams struct {
	// The name of the song.
	Name SongName
}

func unpackSongsNameFileGetParams(packed middleware.Parameters) (params SongsNameFileGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(SongName)
	}
	return params
}

func decodeSongsNameFileGetParams(args [1]string, argsEscaped bool, r *http.Request) (params SongsNameFileGetParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = SongName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SongsNameGetParams is parameters of GET /songs/{name} operation.
type SongsNameGetParams struct {
	// The name of the song.
	Name SongName
}

func unpackSongsNameGetParams(packed middleware.Parameters) (params SongsNameGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(SongName)
	}
	return params
}

func decodeSongsNameGetParams(args [1]string, argsEscaped bool, r *http.Request) (params SongsNameGetParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = SongName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StatsIDDeleteParams is parameters of DELETE /stats/{id} operation.
type StatsIDDeleteParams struct {
	// The ID of the stat.
	ID StatID
}

func unpackStatsIDDeleteParams(packed middleware.Parameters) (params StatsIDDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(StatID)
	}
	return params
}

func decodeStatsIDDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params StatsIDDeleteParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIDVal uint64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint64(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID = StatID(paramsDotIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StatsIDGetParams is parameters of GET /stats/{id} operation.
type StatsIDGetParams struct {
	// The ID of the stat.
	ID StatID
}

func unpackStatsIDGetParams(packed middleware.Parameters) (params StatsIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(StatID)
	}
	return params
}

func decodeStatsIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params StatsIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotIDVal uint64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUint64(val)
					if err != nil {
						return err
					}

					paramsDotIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ID = StatID(paramsDotIDVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StatsSongSongGetParams is parameters of GET /stats/song/{song} operation.
type StatsSongSongGetParams struct {
	// The song name.
	Song SongName
}

func unpackStatsSongSongGetParams(packed middleware.Parameters) (params StatsSongSongGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "song",
			In:   "path",
		}
		params.Song = packed[key].(SongName)
	}
	return params
}

func decodeStatsSongSongGetParams(args [1]string, argsEscaped bool, r *http.Request) (params StatsSongSongGetParams, _ error) {
	// Decode path: song.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "song",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotSongVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSongVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Song = SongName(paramsDotSongVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "song",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StatsUserUserGetParams is parameters of GET /stats/user/{user} operation.
type StatsUserUserGetParams struct {
	// The username.
	User UserName
}

func unpackStatsUserUserGetParams(packed middleware.Parameters) (params StatsUserUserGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "user",
			In:   "path",
		}
		params.User = packed[key].(UserName)
	}
	return params
}

func decodeStatsUserUserGetParams(args [1]string, argsEscaped bool, r *http.Request) (params StatsUserUserGetParams, _ error) {
	// Decode path: user.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "user",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotUserVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUserVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.User = UserName(paramsDotUserVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "user",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UsersNameDeleteParams is parameters of DELETE /users/{name} operation.
type UsersNameDeleteParams struct {
	// The name of the user.
	Name UserName
}

func unpackUsersNameDeleteParams(packed middleware.Parameters) (params UsersNameDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(UserName)
	}
	return params
}

func decodeUsersNameDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params UsersNameDeleteParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = UserName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UsersNameGetParams is parameters of GET /users/{name} operation.
type UsersNameGetParams struct {
	// The name of the user.
	Name UserName
}

func unpackUsersNameGetParams(packed middleware.Parameters) (params UsersNameGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(UserName)
	}
	return params
}

func decodeUsersNameGetParams(args [1]string, argsEscaped bool, r *http.Request) (params UsersNameGetParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = UserName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

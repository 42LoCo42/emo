// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"io"

	ht "github.com/ogen-go/ogen/http"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type Error struct {
	Msg string `json:"msg"`
}

// GetMsg returns the value of Msg.
func (s *Error) GetMsg() string {
	return s.Msg
}

// SetMsg sets the value of Msg.
func (s *Error) SetMsg(val string) {
	s.Msg = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

type LoginUserGetOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s LoginUserGetOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// NewOptSongsPostReq returns new OptSongsPostReq with value set to v.
func NewOptSongsPostReq(v SongsPostReq) OptSongsPostReq {
	return OptSongsPostReq{
		Value: v,
		Set:   true,
	}
}

// OptSongsPostReq is optional SongsPostReq.
type OptSongsPostReq struct {
	Value SongsPostReq
	Set   bool
}

// IsSet returns true if OptSongsPostReq was set.
func (o OptSongsPostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSongsPostReq) Reset() {
	var v SongsPostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSongsPostReq) SetTo(v SongsPostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSongsPostReq) Get() (v SongsPostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSongsPostReq) Or(d SongsPostReq) SongsPostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStat returns new OptStat with value set to v.
func NewOptStat(v Stat) OptStat {
	return OptStat{
		Value: v,
		Set:   true,
	}
}

// OptStat is optional Stat.
type OptStat struct {
	Value Stat
	Set   bool
}

// IsSet returns true if OptStat was set.
func (o OptStat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStat) Reset() {
	var v Stat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStat) SetTo(v Stat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStat) Get() (v Stat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStat) Or(d Stat) Stat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUser returns new OptUser with value set to v.
func NewOptUser(v User) OptUser {
	return OptUser{
		Value: v,
		Set:   true,
	}
}

// OptUser is optional User.
type OptUser struct {
	Value User
	Set   bool
}

// IsSet returns true if OptUser was set.
func (o OptUser) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUser) Reset() {
	var v User
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUser) SetTo(v User) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUser) Get() (v User, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUser) Or(d User) User {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Song
type Song struct {
	ID   SongID   `json:"ID"`
	Name SongName `json:"Name"`
}

// GetID returns the value of ID.
func (s *Song) GetID() SongID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Song) GetName() SongName {
	return s.Name
}

// SetID sets the value of ID.
func (s *Song) SetID(val SongID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Song) SetName(val SongName) {
	s.Name = val
}

type SongID string

type SongName string

// SongsNameDeleteOK is response for SongsNameDelete operation.
type SongsNameDeleteOK struct{}

// Ref: #/components/schemas/SongFile
type SongsNameFileGetOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s SongsNameFileGetOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// SongsPostOK is response for SongsPost operation.
type SongsPostOK struct{}

type SongsPostReq struct {
	Song Song             `json:"Song"`
	File ht.MultipartFile `json:"File"`
}

// GetSong returns the value of Song.
func (s *SongsPostReq) GetSong() Song {
	return s.Song
}

// GetFile returns the value of File.
func (s *SongsPostReq) GetFile() ht.MultipartFile {
	return s.File
}

// SetSong sets the value of Song.
func (s *SongsPostReq) SetSong(val Song) {
	s.Song = val
}

// SetFile sets the value of File.
func (s *SongsPostReq) SetFile(val ht.MultipartFile) {
	s.File = val
}

// Ref: #/components/schemas/Stat
type Stat struct {
	ID    StatID   `json:"ID" storm:"id,increment"`
	User  UserName `json:"User"`
	Song  SongName `json:"Song"`
	Count int64    `json:"Count"`
	Boost int64    `json:"Boost"`
	Time  float64  `json:"Time"`
}

// GetID returns the value of ID.
func (s *Stat) GetID() StatID {
	return s.ID
}

// GetUser returns the value of User.
func (s *Stat) GetUser() UserName {
	return s.User
}

// GetSong returns the value of Song.
func (s *Stat) GetSong() SongName {
	return s.Song
}

// GetCount returns the value of Count.
func (s *Stat) GetCount() int64 {
	return s.Count
}

// GetBoost returns the value of Boost.
func (s *Stat) GetBoost() int64 {
	return s.Boost
}

// GetTime returns the value of Time.
func (s *Stat) GetTime() float64 {
	return s.Time
}

// SetID sets the value of ID.
func (s *Stat) SetID(val StatID) {
	s.ID = val
}

// SetUser sets the value of User.
func (s *Stat) SetUser(val UserName) {
	s.User = val
}

// SetSong sets the value of Song.
func (s *Stat) SetSong(val SongName) {
	s.Song = val
}

// SetCount sets the value of Count.
func (s *Stat) SetCount(val int64) {
	s.Count = val
}

// SetBoost sets the value of Boost.
func (s *Stat) SetBoost(val int64) {
	s.Boost = val
}

// SetTime sets the value of Time.
func (s *Stat) SetTime(val float64) {
	s.Time = val
}

type StatID uint64

// StatsBulkaddPostOK is response for StatsBulkaddPost operation.
type StatsBulkaddPostOK struct{}

// StatsIDDeleteOK is response for StatsIDDelete operation.
type StatsIDDeleteOK struct{}

// Ref: #/components/schemas/User
type User struct {
	ID UserName `json:"ID"`
	// Is this user allowed to perform administrative actions, such as modifying users and querying all
	// information?.
	IsAdmin bool `json:"IsAdmin"`
	// Is this user allowed to upload new songs?.
	CanUploadSongs bool `json:"CanUploadSongs"`
	// The public key of this user.
	PublicKey []byte `json:"PublicKey"`
}

// GetID returns the value of ID.
func (s *User) GetID() UserName {
	return s.ID
}

// GetIsAdmin returns the value of IsAdmin.
func (s *User) GetIsAdmin() bool {
	return s.IsAdmin
}

// GetCanUploadSongs returns the value of CanUploadSongs.
func (s *User) GetCanUploadSongs() bool {
	return s.CanUploadSongs
}

// GetPublicKey returns the value of PublicKey.
func (s *User) GetPublicKey() []byte {
	return s.PublicKey
}

// SetID sets the value of ID.
func (s *User) SetID(val UserName) {
	s.ID = val
}

// SetIsAdmin sets the value of IsAdmin.
func (s *User) SetIsAdmin(val bool) {
	s.IsAdmin = val
}

// SetCanUploadSongs sets the value of CanUploadSongs.
func (s *User) SetCanUploadSongs(val bool) {
	s.CanUploadSongs = val
}

// SetPublicKey sets the value of PublicKey.
func (s *User) SetPublicKey(val []byte) {
	s.PublicKey = val
}

type UserName string

// UsersNameDeleteOK is response for UsersNameDelete operation.
type UsersNameDeleteOK struct{}

// UsersPostOK is response for UsersPost operation.
type UsersPostOK struct{}
